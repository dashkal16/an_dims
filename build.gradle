// Forge Gradle
buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'

// Ars Nouveau: Dimensions
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

// Base Properties
version = "${mod_version}"
group = "${mod_group}"
archivesBaseName = "${mod_id}"

// Include generated resources
sourceSets {
    main {
        // resources { srcDir 'src/generated/resources' }
    }
}

// Java Version
java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users.
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

// Minecraft Tasks
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: '1.16.5'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory file('run')

            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.markers', ''
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.console.level', 'debug'

            mods {
                an_dims.sources((SourceSet[]) [sourceSets.main])
            }
        }

        server {
            workingDirectory file('run')

            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.markers', ''
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.console.level', 'debug'

            mods {
                an_dims.sources((SourceSet[]) [sourceSets.main])
            }
        }

/*
        // Uncomment this if we start using data generation
        data {
            workingDirectory file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                an_dims.sources((SourceSet[]) [sourceSets.main])
            }
        }
*/
    }
}

// Dependency Repositories
repositories {
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    // Repositories for Ars Nouveau's dependencies
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        url "https://maven.blamejared.com"
    }
    maven {
        name 'LDTTeam - Modding'
        url 'https://ldtteam.jfrog.io/ldtteam/modding/'
    }
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    mavenCentral()
    mavenLocal()
}

// Mod Dependencies
dependencies {
    // Minecraft Forge
    minecraft "net.minecraftforge:forge:${version_mc}-${version_forge}"

    // Ars Nouveau: Dimensions
    compileOnly fg.deobf("mezz.jei:jei-1.16.2:7.3.2.25:api")
    runtimeOnly fg.deobf("mezz.jei:jei-1.16.2:7.3.2.25")
    compileOnly fg.deobf("vazkii.patchouli:Patchouli:1.16.4-50")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:1.16.4-50")

    // Ars Nouveau
    compileOnly fg.deobf("curse.maven:ars-nouveau-401955:${version_ars_nouveau_fileid}")
    runtimeOnly fg.deobf("curse.maven:ars-nouveau-401955:${version_ars_nouveau_fileid}")
    //runtimeOnly fg.deobf("com.hollingsworth.ars_nouveau:Ars-Nouveau:${version_ars_nouveau}")
    //compileOnly fg.deobf("com.hollingsworth.ars_nouveau:Ars-Nouveau:${version_ars_nouveau}")

    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.16.3-4.0.1.0")
    //compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.16.3-4.0.1.0:api")
    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.16.5:3.0.45')

    //compileOnly fg.deobf("com.blamejared.crafttweaker:CraftTweaker-1.16.4:7.1.0.84")
    //annotationProcessor 'org.spongepowered:mixin:0.8.2:processor'

    // Mods I'd like to have in my dev environment
    runtimeOnly fg.deobf("curse.maven:shutup-experimental-settings-407174:3188120")
    runtimeOnly fg.deobf("curse.maven:blame-406201:3419814")

    // Local mods (must be de-obfuscated to the offical mappings)
    //runtimeOnly(fileTree('local-deobf') { include '*.jar'} )
}

// Main Jar
jar {
    manifest {
        attributes([
            "Specification-Title": "${mod_name}",
            "Specification-Vendor": "${mod_author}",
            "Specification-Version": archiveVersion,
            "Implementation-Title": "${mod_name}",
            "Implementation-Version": archiveVersion,
            "Implementation-Vendor" : "${mod_author}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    from sourceSets.main.output
    afterEvaluate { finalizedBy reobfJar }
}

// De-obfuscated Jar (Not produced by default)
task deobfJar(type: Jar) {
    archiveClassifier.set("deobf-${mappings_channel}-${mappings_version}")
    from sourceSets.main.output
    manifest = jar.manifest
}

// Sources Jar
task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allJava
    manifest = jar.manifest
}

tasks.build.dependsOn sourcesJar

def modsTomlVariables = ['version': project.version,
                         'mod_id': mod_id,
                         'mod_name': mod_name,
                         'mod_url': mod_url,
                         'mod_author': mod_author,
                         'mod_description': mod_description,
                         'mod_icon': mod_icon,
                         'version_ars_nouveau': version_ars_nouveau]

// Allow variable expansions in mods.toml
processResources {
    from(sourceSets.main.resources.srcDirs) {
        duplicatesStrategy 'INCLUDE'
        include 'META-INF/mods.toml'
        expand modsTomlVariables
    }
    from(sourceSets.main.resources.srcDirs) {
        duplicatesStrategy 'EXCLUDE'
        exclude 'META-INF/mods.toml'
    }
}

// Maven Publishing
// For now, local only.
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
/*
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
*/
}
